/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"
#include "Filter.h"
#include "Oscillator.h"
#include "FractionalDelayBuffer.h"


//==============================================================================
/**
*/
class TdelayAudioProcessor  : public AudioProcessor
{
public:
    //==============================================================================
    TdelayAudioProcessor();
    ~TdelayAudioProcessor();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;

    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;

    //==============================================================================
    const String getName() const override;
    
    int getNumParameters();
    
    float getParameter (int index);
    void setParameter (int index, float newValue);
    
    const String getParameterName (int index);
    const String getParameterText (int index);

    bool acceptsMidi() const override;
    bool producesMidi() const override;
    bool silenceInProducesSilenceOut() const override;
    double getTailLengthSeconds() const override;

    //==============================================================================
    int getNumPrograms() override;
    int getCurrentProgram() override;
    void setCurrentProgram (int index) override;
    const String getProgramName (int index) override;
    void changeProgramName (int index, const String& newName) override;

    //==============================================================================
    void getStateInformation (MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;
    
    //==============================================================================

    // Adjustable LFO parameters:
    float frequency;  // LFO frequency (Hz)
    float depth;      // Depth of effect (0-1)
    int   waveform;      // What shape should be used for the LFO
    
    
    //Pan stuff
    
    void Panner (AudioSampleBuffer &buffer, double crossValue);
    double crossValue;
    double lChannelPan;
    double rChannelPan;
    
    //Mid side width stuff
    
    void MidSide (AudioSampleBuffer &buffer, double width);
    double lChannelData;
    double rChannelData;
    double midChannelData;
    double sideChannelData;
    double lOutChannelData;
    double rOutChannelData;
    
    //Stereo Widener Variables
    double coef_S;
    double width;
    bool widthONOFF;
    
    float getWidth();
    void setWidth(float w);
    
    float getWidthONOFF();
    void setWidthONOFF(float wONOFF);
    
     
    enum Parameters {
        delayParam = 0,
        feedbackParam,
        modParam,
        mixParam,
        filterTypeParam,
        filterCutoffParam,
        filterQParam,
        qIsBandParam,
        filterGainParam,
        filterONOFFParam,
        widthParam,
        widthONOFFParam,
        crossValueParam,
        crossValueONOFF,
        kFrequencyParam,
        kDepthParam,
        kWaveformParam,
        totalNumParams
    };
    
    
private:
    
    float parameters[17];
    
    
    float lfo(float phase, int waveform);
    
    float lfoPhase;     // Phase of the low-frequency oscillator
    double inverseSampleRate; // It's more efficient to multiply than divide, so cache the inverse of the sample rate
    //Filter Instances
    Filter filter1;
    
    //Chorus Instances and parameters
    float leftDelayTime, rightDelayTime;
    Oscillator  leftOsc, rightOsc;
    FractionalDelayBuffer leftBuffer, rightBuffer;
    //==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (TdelayAudioProcessor)
};


#endif  // PLUGINPROCESSOR_H_INCLUDED
